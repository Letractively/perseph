/* Nothing actually usess the charset yet, the db variable in PHP must be set to do the conversion correctly */
default charset "UTF-8";

/* Custom types allow finer control over formatting and conversions. Custom types can
	not be used in the "provider" sections. */
type CustomID<Integer> { 	/* The base type says how this type behaves (for forms,listings,+elsewhere) */

}

entity DBSTest {
	fields {
		ID<CustomID> 
			ALT_RECORD_KEY;
		Name<String> 
			ALT_RECORD_KEY TITLE MAXLEN(50)
			LABEL("Logical Name")
			DESC("A description which can be used for forms or for general reference.")
			ALLOW_NULL;
		Date<Date>;
		Time<Time>;
		DateTime<DateTime> ALLOW_NULL;
		Bool<Bool> DEFAULT(True);
		Decimal<Decimal>;
		Float<Float> DEFAULT(123.5);
		NameRef<DBSName> ALLOW_NULL DEFAULT(NULL);
		MemoryOnly<Integer>
			LABEL("In Memory Integer");
		OtherDecimal<Decimal>
			LABEL("Save Only Decimal");
		NullStr<String> ALLOW_NULL;
	}
	
	aliases {
		/* Indicate that "ANumber" can also be used to reference Decimal, the fields are equivalent 
			TODO: check search/searchAndDelete case */
		ANumber = Decimal;
	}
	
	search TwoKeys<BasicTwoKeys> {
		filter Master = @SELF;
		sort Value ASC;
	}
	
	search TwoKeysValue<BasicTwoKeys> {
		filter ( Master = @SELF AND Value = ? );
	}
	
	search TwoKeysMatching<BasicTwoKeys> {
		filter ( Master = @SELF AND Value = @Decimal );
	}
}

search InclBasicTwoKeys<BasicTwoKeys> {
	filter Master = ?;
	sort Value ASC;
}

search ManyField<DBSTest> {
	filter ( ( Bool = ? AND Float = ? ) OR ( Bool = ? AND Decimal = ? ) );
}

search SortSearch<DBSTest> {
	filter Name ~= "Search:*";
	sort Decimal ASC;
}

search KeySortSearch<DBSTest> {
	filter Name ~= "Search:*";
}

search MultiSortSearch<DBSTest> {
	filter Name ~= "Search:*";
	sort Decimal,Name ASC;
}

mapper DBSTest {
	provider DBTest;
	
	fields {
		using basic {
			@ID => ID;
			@Name = Name;
			Date = @Date;
			@Time = Time;
			@DateTime = DateTime;
			@Bool = 	Bool;
			@Decimal = Decimal;
			@Decimal <= OtherDecimal;
			@Float = Float;
			
			/* Link DB value directly to entity field record key */
			@NameRef = NameRef.ID;
			@NullStr = NullStr;
		}
	}
}

/* Used to check that an explicit identifier works*/
entity DBSIdentEx {
	fields {
		ID<Integer> ALT_RECORD_KEY IDENTIFIER;
		Name<String> ALT_RECORD_KEY;
		Value<Decimal>;
	}
}

mapper DBSIdentEx {
	provider DBTest;
	fields {
		using basic {
			@ID => ID;
			@Name = Name;
			@Decimal = Value;
		}
	}
}

entity DBSTwoKeys {
	fields {
		Num<Integer> RECORD_KEY;
		Name<String> RECORD_KEY MAXLEN(20);
		Value<String> MAXLEN(50) DEFAULT("Just 'a' 	Default");
	}
}

mapper DBSTwoKeys {
	provider DBTest;
	fields {
		using twokeys {
			@KeyNum = Num;
			@KeyString = Name;
			@Value = Value;
		}
	}
}

entity DBSStrings {
	class DerivedStrings;
	
	fields  {
		/* If a field is a RECORD_KEY, LOAD_ONLY, and maps to a LAST_INSERT_ID db field, then for creating
			this entity it need not be specified. This is to support auto_increment like columns as the only key for
			an entity. (em: I'm not so happy about this, it should have some kind of DEFAULT(@SAVE) marked! */
		MyID<Integer> RECORD_KEY;
		Labels<Array<String>>;
		Class<String> MAXLEN(2);
		Category<String> MAXLEN(2);
	}
}

mapper DBSStrings {
	provider DBTest;
	fields {
		using convert {
			@Index => convert_id<CustomID>( MyID );
			
			/* Use a custom conversion funtion to convert from/to a comma separated string to/from an array */
			convert_labels<Array<String>>( @Labels ) = Labels;
			@LabelCount <= count_labels<Integer>( Labels );
			
			/* The below simply lacks a unifying concept of how this would work with relation to searching,
				loading, and saving. It may be beyond what Persephone is currently trying to do, so it won't
				be implemented now.*/
			/*@Code = concat_code<String>( Class, Category );*/
		}
	}
}

search MyDBSStrings<DBSStrings> {
	filter MyID = ?;
}

entity DBSName {
	fields {
		/* This time we explicitly set IDs */
		ID<Integer> RECORD_KEY;
		
		/* Titles are used for Forms and Listings as the primary way to refer to this entity */
		Name<String> TITLE;
	}
}

mapper DBSName {
	provider DBTest2;
	fields {
		using names {
			@ID = ID;
			@Name = Name;
		}
	}
}

entity DBSLink {
	fields {
		ID<Integer> RECORD_KEY;
		Basic<DBSTest>;
	}
}

mapper DBSLink {
	provider DBTest;
	fields {
		using link {
			@ID => ID;
			@BasicID = Basic.ID;
		}
	}
}

entity BrokenKey {
	fields {
		ID<Integer> RECORD_KEY;
		Name<String>;	/*Unique in DB*/
	}
}

mapper BrokenKey {
	provider DBTest;
	fields {
		using basic {
			@ID => ID;
			@Name = Name;
		}
	}
}

entity NullKey {
	fields {
		ID<Integer> ALT_RECORD_KEY;
		Name<String> ALT_RECORD_KEY ALLOW_NULL;	/*Unique in DB*/
		Decimal<Decimal>;
	}
}

mapper NullKey {
	provider DBTest;
	fields {
		using basic {
			@ID => ID;
			@Name = Name;
			@Decimal = Decimal;
		}
	}
}

entity NullKey2 {
	fields {
		ID<Integer> ALT_RECORD_KEY;
		/* See the NOTE on getKeyBlock in DBSchemaPHP to understand why this is such
			a special case -- the above in NullKey also is, but as there is no default it isn't
			considered under normal circumstances anyways.  This covers a rather special
			use case -- but a nonetheless valid one. */
		Name<String> ALT_RECORD_KEY ALLOW_NULL DEFAULT(NULL);	/*Unique in DB*/
		Decimal<Decimal>;
	}
}

mapper NullKey2 {
	provider DBTest;
	fields {
		using basic {
			@ID => ID;
			@Name = Name;
			@Decimal = Decimal;
		}
	}
}


entity DBSLinkNames {
	fields {
		Left<DBSName> RECORD_KEY;
		Right<DBSName> RECORD_KEY;
		Value<Integer>;
	}
}

mapper DBSLinkNames {
	provider DBTest;
	fields {
		using link2 {
			@NameA = Left.ID;
			@NameB = Right.ID;
			@Value = Value;
		}
	}
}

/**
 * Used to test a traditional 1 to many relationship (a container)
 */
entity BasicTwoKeys {
	fields {
		Master<DBSTest>;
		Value<String>;
	}
}

mapper BasicTwoKeys {
	provider DBTest;
	fields {
		using twokeys {
			@KeyNum = Master.ID;
			@Value = Value;
		}
	}
}

/********************************************************************
 * For Merge Testing
 *******************************************************************/
entity SimpleName {
	fields {
		NameID<Integer> ALT_RECORD_KEY;
		Name<String> TITLE ALT_RECORD_KEY;
	}
}

mapper SimpleName {
	provider DBTest;
	fields {
		using idname {
			@ID => NameID;
			@Name = Name;
		}
	}
}

entity SimpleBasic {
	fields {
		BasicID<CustomID> RECORD_KEY;
		Decimal<Decimal>;
		Float<Float> DEFAULT(123.5);
	}
}

mapper SimpleBasic {
	provider DBTest;
	
	fields {
		using mergebasic {
			@ID = BasicID;
			@Decimal = Decimal;
			@Float = Float;
		}
	}
}

entity SimpleMerge {
	merge {
		SimpleName REQUIRED KEY_MERGE;
		SimpleBasic OPTIONAL_CREATE;
	}
	link {
		SimpleName.NameID = SimpleBasic.BasicID;
	}
}
